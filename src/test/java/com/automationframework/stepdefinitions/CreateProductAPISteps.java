package com.automationframework.stepdefinitions;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.*;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.Assert;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreateProductAPISteps {
    private Response response;
    private Map<String, Object> payload;

    @Given("I set the Fake Store API endpoint for creating a product")
    public void setCreateProductEndpoint() {
        // Base URI is already set in Hooks
        RestAssured.basePath = "/products";
        System.out.println("POST Endpoint set to: " + RestAssured.baseURI + RestAssured.basePath);
    }

    @Given("I prepare the product payload with:")
    public void prepareProductPayload(DataTable dataTable) {
        List<Map<String, String>> rows = dataTable.asMaps(String.class, String.class);
        payload = new HashMap<>();
        for (Map<String, String> row : rows) {
            for (String key : row.keySet()) {
                String value = row.get(key);
                // Convert price to double
                if ("price".equalsIgnoreCase(key)) {
                    payload.put(key, Double.parseDouble(value));
                } else {
                    payload.put(key, value);
                }
            }
        }
        System.out.println("Payload prepared: " + payload);
    }

    @When("I send a POST request to the endpoint")
    public void sendPostRequest() {
        response = RestAssured
                .given()
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post()
                .then()
                .extract()
                .response();

        System.out.println("POST Response received: " + response.getBody().asString());
    }

    @Then("the product response status code should be {int}")
    public void validateProductResponseStatusCode(int expectedStatusCode) {
        Assert.assertEquals(response.getStatusCode(), expectedStatusCode, "Status code mismatch");
        System.out.println("Status code validated: " + expectedStatusCode);
    }

    @Then("the response should contain the same data as the payload")
    public void validateResponseFields() {
        Map<String, Object> responseBody = response.jsonPath().getMap("$");

        // Only validate fields that actually appear in the response
        Assert.assertEquals(responseBody.get("title"), payload.get("title"),
                "Mismatch for field: title");

        if (responseBody.containsKey("id")) {
            System.out.println("Product ID generated by API: " + responseBody.get("id"));
        }

        System.out.println("POST response fields validated successfully.");
    }
}
